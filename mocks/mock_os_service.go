// Code generated by MockGen. DO NOT EDIT.
// Source: services/OsService.go
//
// Generated by this command:
//
//	mockgen -source=services/OsService.go -destination=mocks/mock_os_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOsService is a mock of OsService interface.
type MockOsService struct {
	ctrl     *gomock.Controller
	recorder *MockOsServiceMockRecorder
	isgomock struct{}
}

// MockOsServiceMockRecorder is the mock recorder for MockOsService.
type MockOsServiceMockRecorder struct {
	mock *MockOsService
}

// NewMockOsService creates a new mock instance.
func NewMockOsService(ctrl *gomock.Controller) *MockOsService {
	mock := &MockOsService{ctrl: ctrl}
	mock.recorder = &MockOsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOsService) EXPECT() *MockOsServiceMockRecorder {
	return m.recorder
}

// FileExists mocks base method.
func (m *MockOsService) FileExists(path string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileExists", path)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileExists indicates an expected call of FileExists.
func (mr *MockOsServiceMockRecorder) FileExists(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileExists", reflect.TypeOf((*MockOsService)(nil).FileExists), path)
}

// GetFileData mocks base method.
func (m *MockOsService) GetFileData(path string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileData", path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileData indicates an expected call of GetFileData.
func (mr *MockOsServiceMockRecorder) GetFileData(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileData", reflect.TypeOf((*MockOsService)(nil).GetFileData), path)
}

// OpenInEditor mocks base method.
func (m *MockOsService) OpenInEditor(editor, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenInEditor", editor, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenInEditor indicates an expected call of OpenInEditor.
func (mr *MockOsServiceMockRecorder) OpenInEditor(editor, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenInEditor", reflect.TypeOf((*MockOsService)(nil).OpenInEditor), editor, path)
}
