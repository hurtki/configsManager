// Code generated by MockGen. DO NOT EDIT.
// Source: services/StdInputService.go
//
// Generated by this command:
//
//	mockgen -source=services/StdInputService.go -destination=mocks/mock_input_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockInputService is a mock of InputService interface.
type MockInputService struct {
	ctrl     *gomock.Controller
	recorder *MockInputServiceMockRecorder
	isgomock struct{}
}

// MockInputServiceMockRecorder is the mock recorder for MockInputService.
type MockInputServiceMockRecorder struct {
	mock *MockInputService
}

// NewMockInputService creates a new mock instance.
func NewMockInputService(ctrl *gomock.Controller) *MockInputService {
	mock := &MockInputService{ctrl: ctrl}
	mock.recorder = &MockInputServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInputService) EXPECT() *MockInputServiceMockRecorder {
	return m.recorder
}

// AskUser mocks base method.
func (m *MockInputService) AskUser(prompt string, options []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskUser", prompt, options)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AskUser indicates an expected call of AskUser.
func (mr *MockInputServiceMockRecorder) AskUser(prompt, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskUser", reflect.TypeOf((*MockInputService)(nil).AskUser), prompt, options)
}

// GetPipedInput mocks base method.
func (m *MockInputService) GetPipedInput() (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipedInput")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetPipedInput indicates an expected call of GetPipedInput.
func (mr *MockInputServiceMockRecorder) GetPipedInput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipedInput", reflect.TypeOf((*MockInputService)(nil).GetPipedInput))
}
