// Code generated by MockGen. DO NOT EDIT.
// Source: services/AppConfigService.go
//
// Generated by this command:
//
//	mockgen -source=services/AppConfigService.go -destination=mocks/mock_app_config_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	services "github.com/hurtki/configsManager/services"
	gomock "go.uber.org/mock/gomock"
)

// MockAppConfigService is a mock of AppConfigService interface.
type MockAppConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockAppConfigServiceMockRecorder
	isgomock struct{}
}

// MockAppConfigServiceMockRecorder is the mock recorder for MockAppConfigService.
type MockAppConfigServiceMockRecorder struct {
	mock *MockAppConfigService
}

// NewMockAppConfigService creates a new mock instance.
func NewMockAppConfigService(ctrl *gomock.Controller) *MockAppConfigService {
	mock := &MockAppConfigService{ctrl: ctrl}
	mock.recorder = &MockAppConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppConfigService) EXPECT() *MockAppConfigServiceMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockAppConfigService) Load() (*services.AppConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].(*services.AppConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockAppConfigServiceMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockAppConfigService)(nil).Load))
}

// Save mocks base method.
func (m *MockAppConfigService) Save(arg0 *services.AppConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockAppConfigServiceMockRecorder) Save(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAppConfigService)(nil).Save), arg0)
}
