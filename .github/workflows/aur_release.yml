name: Release AUR (debug)

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    environment: aur-deployment
    container: archlinux:latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install deps
        run: |
          pacman -Syu --noconfirm base-devel git openssh

      - name: Print env
        run: |
          echo "=== ENVIRONMENT VARIABLES ==="
          env
          echo "=== WHOAMI ==="
          whoami
          echo "=== HOME DIR ==="
          ls -la $HOME

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AUR_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          chmod 700 ~/.ssh
          # записываем хост-ключ AUR (жёстко)
          echo "aur.archlinux.org ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIEuBKrPzbawxA/k2g6NcyV5jmqwJ2s+zpgZGZ7tpLIcN" > ~/.ssh/known_hosts

          echo "=== ~/.ssh permissions ==="
          ls -la ~/.ssh
          echo "=== ~/.ssh/id_ed25519 ==="
          head -n 2 ~/.ssh/id_ed25519
          echo "=== ~/.ssh/known_hosts ==="
          cat ~/.ssh/known_hosts

          # глобальный ssh для git
          git config --global core.sshCommand "ssh -vvv -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes"

      - name: Test SSH with verbose logs
        run: |
          echo "=== RAW SSH TEST ==="
          ssh -vvv -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes aur@aur.archlinux.org || true

      - name: Test git over SSH
        run: |
          echo "=== GIT LS-REMOTE ==="
          GIT_SSH_COMMAND="ssh -vvv -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes" \
            git ls-remote ssh://aur@aur.archlinux.org/configsmanager.git || true

      - name: Clone AUR repo
        run: |
          echo "=== TRY CLONE ==="
          git clone ssh://aur@aur.archlinux.org/configsmanager.git aur-repo || true
          echo "=== LIST AUR-REPO ==="
          ls -la aur-repo || true

      - name: Update PKGBUILD
        run: |
          cd aur-repo || exit 0
          VERSION=${GITHUB_REF##*/}
          VERSION=${VERSION#v}
          sed -i "s/^pkgver=.*/pkgver=${VERSION}/" PKGBUILD
          makepkg --printsrcinfo > .SRCINFO
          git config user.name "github-bot"
          git config user.email "bot@example.com"
          git add PKGBUILD .SRCINFO
          git commit -m "Update to ${VERSION}" || true
          git push || true

